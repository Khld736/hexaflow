"use client"

import { useEffect, useRef, useState } from "react"
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

interface FloatingTextBannerProps {
  className?: string
  words?: string[]
  logoText?: string
}

export default function FloatingTextBanner({ className, words = [], logoText = "HexaFlow" }: FloatingTextBannerProps) {
  const svgRef = useRef<SVGSVGElement>(null)
  const [dimensions, setDimensions] = useState({ width: 1000, height: 500 })
  const [isClient, setIsClient] = useState(false)

  // Default tech/coding related words if none provided
  const defaultWords = [
    "code",
    "design",
    "build",
    "iterate",
    "discover",
    "transform",
    "ideas",
    "runtime",
    "software",
    "solutions",
    "elegant",
    "efficient",
    "web",
    "mobile",
    "automation",
    "AI",
    "data",
    "analytics",
    "custom",
    "development",
    "responsive",
    "modern",
    "architecture",
    "integration",
    "scalable",
    "secure",
    "robust",
    "innovative",
    "technology",
    "digital",
    "experience",
    "interface",
    "user",
    "client",
    "server",
    "cloud",
    "database",
    "API",
    "framework",
    "library",
    "component",
    "module",
    "function",
    "algorithm",
    "pattern",
    "structure",
    "system",
    "platform",
    "service",
    "application",
    "product",
    "project",
    "team",
    "collaboration",
    "agile",
    "sprint",
    "release",
    "version",
    "update",
    "maintenance",
    "support",
    "documentation",
    "testing",
    "quality",
    "performance",
    "optimization",
    "security",
    "reliability",
    "accessibility",
    "usability",
    "frontend",
    "backend",
    "fullstack",
    "devops",
    "continuous",
    "integration",
    "deployment",
    "monitoring",
    "analysis",
    "reporting",
    "dashboard",
    "visualization",
    "insight",
    "decision",
    "strategy",
    "planning",
    "execution",
    "delivery",
    "success",
    "growth",
    "innovation",
    "transformation",
    "hexaflow",
    "hex",
    "flow",
    "grid",
    "pattern",
    "structure",
    "geometry",
    "shape",
    "form",
    "function",
    "balance",
    "harmony",
    "precision",
    "accuracy",
    "detail",
    "craft",
    "artistry",
    "engineering",
    "science",
    "mathematics",
    "logic",
    "reason",
    "intuition",
    "creativity",
    "imagination",
    "vision",
    "mission",
    "purpose",
    "goal",
    "objective",
    "target",
    "milestone",
    "achievement",
    "success",
    "excellence",
    "quality",
    "value",
    "proposition",
    "offering",
    "solution",
    "problem",
    "challenge",
    "opportunity",
    "innovation",
    "disruption",
    "revolution",
    "evolution",
    "progress",
    "advancement",
    "improvement",
    "enhancement",
    "upgrade",
    "update",
    "version",
    "release",
    "launch",
    "deployment",
    "implementation",
    "execution",
    "operation",
    "function",
    "feature",
    "capability",
    "capacity",
    "potential",
    "power",
    "strength",
    "advantage",
    "benefit",
    "value",
    "worth",
    "merit",
    "quality",
    "attribute",
    "characteristic",
    "property",
    "trait",
    "aspect",
    "dimension",
    "facet",
    "element",
    "component",
    "module",
    "unit",
    "part",
    "piece",
    "segment",
    "section",
    "division",
    "category",
    "classification",
    "type",
    "kind",
    "sort",
    "variety",
    "range",
    "spectrum",
    "typescript",
    "javascript",
    "react",
    "nextjs",
    "tailwind",
    "framer",
    "motion",
    "animation",
    "transition",
    "transform",
    "translate",
    "rotate",
    "scale",
    "skew",
    "perspective",
    "3d",
    "2d",
    "vector",
    "raster",
    "pixel",
    "resolution",
    "responsive",
    "adaptive",
    "fluid",
    "flexible",
    "dynamic",
    "static",
    "fixed",
    "absolute",
    "relative",
    "position",
    "layout",
    "grid",
    "flex",
    "box",
    "model",
    "margin",
    "padding",
    "border",
    "shadow",
    "gradient",
    "color",
    "palette",
    "scheme",
    "theme",
    "dark",
    "light",
    "mode",
    "toggle",
    "switch",
    "button",
    "input",
    "form",
    "validation",
    "submission",
    "response",
    "request",
    "api",
    "endpoint",
    "route",
    "path",
    "parameter",
    "query",
    "body",
    "header",
    "status",
    "code",
    "success",
    "error",
    "warning",
    "info",
    "debug",
    "log",
    "console",
    "terminal",
    "command",
    "line",
    "interface",
    "gui",
    "cli",
    "sdk",
    "api",
    "library",
    "framework",
    "platform",
    "environment",
    "development",
    "production",
    "staging",
    "test",
    "local",
    "remote",
    "server",
    "client",
    "browser",
    "device",
    "mobile",
    "desktop",
    "tablet",
    "phone",
    "watch",
    "wearable",
    "iot",
    "internet",
    "things",
    "connected",
    "smart",
    "intelligent",
    "automated",
    "manual",
    "process",
    "procedure",
    "workflow",
    "pipeline",
    "stream",
    "flow",
    "current",
    "direction",
    "orientation",
    "alignment",
    "order",
    "sequence",
    "series",
    "collection",
    "set",
    "array",
    "object",
    "instance",
    "class",
    "method",
    "property",
    "attribute",
    "field",
    "variable",
    "constant",
    "let",
    "var",
    "const",
    "function",
    "arrow",
    "callback",
    "promise",
    "async",
    "await",
    "then",
    "catch",
    "finally",
    "try",
    "except",
    "throw",
    "raise",
    "error",
    "exception",
    "bug",
    "issue",
    "problem",
    "solution",
    "fix",
    "patch",
    "update",
    "upgrade",
    "version",
    "semantic",
    "major",
    "minor",
    "patch",
    "alpha",
    "beta",
    "release",
    "candidate",
    "stable",
    "unstable",
    "deprecated",
    "legacy",
    "modern",
    "contemporary",
    "future",
    "past",
    "present",
    "time",
    "space",
    "dimension",
    "reality",
    "virtual",
    "augmented",
    "mixed",
    "extended",
    "reality",
    "simulation",
    "emulation",
    "virtualization",
    "container",
    "docker",
    "kubernetes",
    "orchestration",
    "microservice",
    "monolith",
    "architecture",
    "design",
    "pattern",
    "singleton",
    "factory",
    "builder",
    "adapter",
    "facade",
    "proxy",
    "decorator",
    "observer",
    "strategy",
    "command",
    "state",
    "visitor",
    "mediator",
    "chain",
    "responsibility",
    "interpreter",
    "iterator",
    "composite",
    "flyweight",
    "bridge",
    "prototype",
    "template",
    "method",
    "memento",
    "state",
  ]

  const allWords = words.length > 0 ? words : defaultWords

  useEffect(() => {
    setIsClient(true)

    const handleResize = () => {
      if (svgRef.current && svgRef.current.parentElement) {
        const { width, height } = svgRef.current.parentElement.getBoundingClientRect()
        setDimensions({ width, height })
      }
    }

    handleResize()
    window.addEventListener("resize", handleResize)

    return () => {
      window.removeEventListener("resize", handleResize)
    }
  }, [])

  // Generate random text positions
  const generateTextElements = () => {
    if (!isClient) return null

    const elements = []
    const numElements = Math.floor(dimensions.width / 20) // Adjust density based on width

    for (let i = 0; i < numElements; i++) {
      const word = allWords[Math.floor(Math.random() * allWords.length)]
      const x = Math.random() * dimensions.width
      const y = Math.random() * dimensions.height
      const opacity = Math.random() * 0.5 + 0.1 // Between 0.1 and 0.6

      elements.push(
        <text
          key={`text-${i}`}
          x={x}
          y={y}
          style={{
            fontSize: "14px",
            dominantBaseline: "hanging",
            whiteSpace: "pre",
            opacity: opacity,
          }}
          fill="#7d9ddf"
        >
          {word}
        </text>,
      )
    }

    return elements
  }

  return (
    <div className={cn("relative w-full h-full overflow-hidden", className)}>
      <svg
        ref={svgRef}
        xmlns="http://www.w3.org/2000/svg"
        version="1.1"
        viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}
        style={{ background: "rgb(6, 20, 52)", width: "100%", height: "100%" }}
        className="scanlines"
      >
        {generateTextElements()}

        {/* Logo text in the center */}
        <motion.text
          x="50%"
          y="50%"
          style={{
            fontSize: "32px",
            fontWeight: "bold",
            dominantBaseline: "middle",
            textAnchor: "middle",
          }}
          fill="white"
          fillOpacity="1"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 1.5 }}
        >
          {logoText}
        </motion.text>
      </svg>
    </div>
  )
}
